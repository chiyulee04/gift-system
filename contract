// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract GiftCard {
    mapping(bytes32 => uint256) public cards;
    mapping(bytes32 => bool) public redeemed;

    event CardPurchased(bytes32 indexed codeHash, uint256 amount);
    event CardRedeemed(bytes32 indexed codeHash, uint256 amount);

    function buy(bytes32 codeHash) public payable {
        require(msg.value >= 0.001 ether, "Minimum value is 0.001 ETH");
        require(cards[codeHash] == 0, "Card already exists");
        
        cards[codeHash] = msg.value;
        emit CardPurchased(codeHash, msg.value);
    }

    function redeem(string memory code) public {
        bytes32 codeHash = keccak256(abi.encodePacked(code));
        require(cards[codeHash] > 0, "Card does not exist");
        require(!redeemed[codeHash], "Card already redeemed");
        
        uint256 amount = cards[codeHash];
        redeemed[codeHash] = true;
        
        payable(msg.sender).transfer(amount);
        emit CardRedeemed(codeHash, amount);
    }
}
